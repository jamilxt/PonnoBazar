version: "3.8"
services:
  eureka-service:
    build:
      context: eureka-service
      dockerfile: Dockerfile
    image: eureka_service
    container_name: eureka_service
    restart: unless-stopped
    hostname: eureka-service
    ports:
      - "8761:8761"
    networks:
      - backend
  gateway_service:
    build:
      context: gateway-service
      dockerfile: Dockerfile
    image: gateway_service
    container_name: gateway_service
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - eureka-service
      - product_service
      - inventory_service
    networks:
      - backend
  product_service:
    build: 
      context: product-service
      dockerfile: Dockerfile
    image: product_service
    container_name: product_service
    restart: unless-stopped
    ports:
      - "9090:9090"
    environment:
      - mongodb_uri=mongodb://product_service_db
    depends_on:
      - product_service_db
      - redis
      - eureka-service
      - zipkins
    networks:
      - backend
  order_service:
    build: 
      context: order-service
      dockerfile: Dockerfile
    image: order_service
    container_name: order_service
    restart: unless-stopped
    ports:
      - "9093:9093"
    depends_on:
      - product_service
      - inventory_service
      - eureka-service
      - kafka
      - zipkins
    networks:
      - backend
  inventory_service:
    build:
      context: inventory-service
      dockerfile: Dockerfile
    image: inventory_service
    restart: unless-stopped
    container_name: inventory_service
    ports:
      - "9091:9091"
    depends_on:
      - inventory_service_db
      - eureka-service
      - kafka
      - product_service
      - zipkins
    networks:
      - backend
  product_service_db:
    restart: always
    image: mongo:latest
    container_name: product_service_db
    ports:
      - "27017:27017"
    networks:
      - backend
  inventory_service_db:
    platform: linux/amd64
    image: mysql:8
    restart: unless-stopped
    container_name: inventory_service_db
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_PASSWORD=inventory
      - MYSQL_USER=inventory
      - MYSQL_DATABASE=inventory_service
    ports:
      - "3306:3306"
    networks:
      - backend
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend
  zipkins:
    image: openzipkin/zipkin
    container_name: zipkins
    ports:
      - "9411:9411"
    networks:
      - backend
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - backend
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 300000000
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend
networks:
  backend:
    name: backend
    driver: bridge
